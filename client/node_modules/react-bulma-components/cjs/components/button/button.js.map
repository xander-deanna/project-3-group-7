{"version":3,"sources":["../../../src/components/button/button.js"],"names":["Button","children","className","renderAs","color","size","outlined","inverted","submit","reset","fullwidth","status","loading","disabled","remove","isSelected","isStatic","rounded","onClick","text","props","otherProps","type","undefined","Group","ButtonGroup","defaultProps"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;AAEA,IAAMA,MAAM,GAAG,SAATA,MAAS,OAqBT;AAAA;;AAAA,MApBJC,QAoBI,QApBJA,QAoBI;AAAA,MAnBJC,SAmBI,QAnBJA,SAmBI;AAAA,MAlBJC,QAkBI,QAlBJA,QAkBI;AAAA,MAjBJC,KAiBI,QAjBJA,KAiBI;AAAA,MAhBJC,IAgBI,QAhBJA,IAgBI;AAAA,MAfJC,QAeI,QAfJA,QAeI;AAAA,MAdJC,QAcI,QAdJA,QAcI;AAAA,MAbJC,MAaI,QAbJA,MAaI;AAAA,MAZJC,KAYI,QAZJA,KAYI;AAAA,MAXJC,SAWI,QAXJA,SAWI;AAAA,MAVJC,MAUI,QAVJA,MAUI;AAAA,MATJC,OASI,QATJA,OASI;AAAA,MARJC,QAQI,QARJA,QAQI;AAAA,MAPJC,MAOI,QAPJA,MAOI;AAAA,MANJC,UAMI,QANJA,UAMI;AAAA,MALJC,QAKI,QALJA,QAKI;AAAA,MAJJC,OAII,QAJJA,OAII;AAAA,MAHJC,OAGI,QAHJA,OAGI;AAAA,MAFJC,IAEI,QAFJA,IAEI;AAAA,MADDC,KACC;;AACJ,MAAIC,UAAU,GAAG,EAAjB;;AACA,MAAIb,MAAJ,EAAY;AACVa,IAAAA,UAAU,GAAG;AACXC,MAAAA,IAAI,EAAE,QADK;AAEXnB,MAAAA,QAAQ,EAAE;AAFC,KAAb;AAID;;AACD,MAAIM,KAAJ,EAAW;AACTY,IAAAA,UAAU,GAAG;AACXC,MAAAA,IAAI,EAAE,OADK;AAEXnB,MAAAA,QAAQ,EAAE;AAFC,KAAb;AAID;;AAED,MAAIa,QAAJ,EAAc;AACZK,IAAAA,UAAU,GAAG;AACXlB,MAAAA,QAAQ,EAAE;AADC,KAAb;AAGD;;AAED,sBACE,gCAAC,mBAAD;AACE,IAAA,QAAQ,EAAEU,QAAQ,GAAG,CAAC,CAAJ,GAAQ,CAD5B;AAEE,IAAA,QAAQ,EAAEV;AAFZ,KAGMiB,KAHN,EAIMC,UAJN;AAKE,IAAA,QAAQ,EAAER,QALZ;AAME,IAAA,OAAO,EAAEA,QAAQ,GAAGU,SAAH,GAAeL,OANlC;AAOE,IAAA,SAAS,EAAE,6BAAWhB,SAAX,+DACFE,KADE,GACQA,KADR,6CAEFC,IAFE,GAEOA,IAFP,gCAGT,aAHS,EAGMU,UAHN,gCAIT,WAJS,EAIIC,QAJJ,gCAKT,YALS,EAKKC,OALL,gCAMT,aANS,EAMMX,QANN,gCAOT,aAPS,EAOMC,QAPN,gCAQT,cARS,EAQOG,SARP,6CASF,iCAAgBC,MAAhB,CATE,GAS0BA,MAT1B,gCAUT,YAVS,EAUKC,OAVL,gCAWT,SAXS,EAWEO,IAXF,0CAYDL,MAZC,0CAaD,CAACA,MAbA;AAPb,MAuBGb,QAvBH,CADF;AA2BD,CArED;;AAuEAD,MAAM,CAACwB,KAAP,GAAeC,uBAAf;AAqEAzB,MAAM,CAAC0B,YAAP,GAAsB;AACpBvB,EAAAA,QAAQ,EAAE;AADU,CAAtB;eAIeH,M","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport ButtonGroup from './components/button-group';\nimport Element from '../element';\nimport { normalizeStatus } from '../../services/normalizer';\n\nconst Button = ({\n  children,\n  className,\n  renderAs,\n  color,\n  size,\n  outlined,\n  inverted,\n  submit,\n  reset,\n  fullwidth,\n  status,\n  loading,\n  disabled,\n  remove,\n  isSelected,\n  isStatic,\n  rounded,\n  onClick,\n  text,\n  ...props\n}) => {\n  let otherProps = {};\n  if (submit) {\n    otherProps = {\n      type: 'submit',\n      renderAs: 'button',\n    };\n  }\n  if (reset) {\n    otherProps = {\n      type: 'reset',\n      renderAs: 'button',\n    };\n  }\n\n  if (isStatic) {\n    otherProps = {\n      renderAs: 'span',\n    };\n  }\n\n  return (\n    <Element\n      tabIndex={disabled ? -1 : 0}\n      renderAs={renderAs}\n      {...props}\n      {...otherProps}\n      disabled={disabled}\n      onClick={disabled ? undefined : onClick}\n      className={classnames(className, {\n        [`is-${color}`]: color,\n        [`is-${size}`]: size,\n        'is-selected': isSelected,\n        'is-static': isStatic,\n        'is-rounded': rounded,\n        'is-outlined': outlined,\n        'is-inverted': inverted,\n        'is-fullwidth': fullwidth,\n        [`is-${normalizeStatus(status)}`]: status,\n        'is-loading': loading,\n        'is-text': text,\n        delete: remove,\n        button: !remove,\n      })}\n    >\n      {children}\n    </Element>\n  );\n};\n\nButton.Group = ButtonGroup;\n\nButton.propTypes = {\n  color: PropTypes.oneOfType([\n    PropTypes.oneOf([\n      'primary',\n      'link',\n      'info',\n      'success',\n      'warning',\n      'danger',\n      'dark',\n      'text',\n      'black-bis',\n      'black-ter',\n      'white-bis',\n      'white-ter',\n      'grey-darker',\n      'grey-dark',\n      'grey-light',\n      'grey-lighter',\n    ]),\n    PropTypes.string,\n  ]),\n  size: PropTypes.oneOfType([\n    PropTypes.oneOf(['small', 'medium', 'large']),\n    PropTypes.string,\n  ]),\n  /**\n   * Whether Button should have an outline.\n   */\n  outlined: PropTypes.bool,\n  /**\n   * Whether Button should have an inverted color scheme. Useful when button is used on colored background\n   */\n  inverted: PropTypes.bool,\n  submit: PropTypes.bool,\n  reset: PropTypes.bool,\n  status: PropTypes.oneOf(['focus', 'hover', 'active']),\n  loading: PropTypes.bool,\n  /**\n   * Whether Button should occupy the full width of parent\n   */\n  fullwidth: PropTypes.bool,\n  disabled: PropTypes.bool,\n  remove: PropTypes.bool,\n  /**\n   * Whether Button is selected. Useful in a Button.Group.\n   */\n  isSelected: PropTypes.bool,\n  /**\n   * Whether Button is non-interactive/static.\n   */\n  isStatic: PropTypes.bool,\n  /**\n   * Whether Button should have fully-rounded corners\n   */\n  rounded: PropTypes.bool,\n  /**\n   * Whether Button is a text button.\n   */\n  text: PropTypes.bool,\n  renderAs: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.string,\n    PropTypes.object,\n  ]),\n};\n\nButton.defaultProps = {\n  renderAs: 'button',\n};\n\nexport default Button;\n"],"file":"button.js"}