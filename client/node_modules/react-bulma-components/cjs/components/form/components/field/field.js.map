{"version":3,"sources":["../../../../../src/components/form/components/field/field.js"],"names":["Field","className","align","multiline","horizontal","kind","size","props","context","k","Label","FieldLabel","Body","FieldBody","defaultProps"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;;;AAEA,IAAMA,KAAK,GAAG,SAARA,KAAQ,OAQR;AAAA;;AAAA,MAPJC,SAOI,QAPJA,SAOI;AAAA,MANJC,KAMI,QANJA,KAMI;AAAA,MALJC,SAKI,QALJA,SAKI;AAAA,MAJJC,UAII,QAJJA,UAII;AAAA,MAHJC,IAGI,QAHJA,IAGI;AAAA,MAFJC,IAEI,QAFJA,IAEI;AAAA,MADDC,KACC;;AACJ,MAAMC,OAAO,GAAG,0BAAhB;AACA,MAAIC,CAAC,GAAG,IAAR;;AAEA,MAAIJ,IAAI,KAAK,QAAb,EAAuB;AACrBI,IAAAA,CAAC,GAAG,YAAJ;AACD,GAFD,MAEO,IAAIJ,IAAI,KAAK,OAAb,EAAsB;AAC3BI,IAAAA,CAAC,GAAG,YAAJ;AACD;;AAED,sBACE,gCAAC,qBAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEH,MAAAA,IAAI,EAAEA,IAAI,IAAIE,OAAO,CAACF;AAAxB;AAA9B,kBACE,gCAAC,mBAAD,eACMC,KADN;AAEE,IAAA,SAAS,EAAE,6BAAW,OAAX,EAAoBN,SAApB,4DACLQ,CADK,GACCA,CADD,0CAELA,CAFK,cAEA,gCAAeP,KAAf,CAFA,GAE0BO,CAAC,KAAK,YAAN,IAAsBP,KAFhD,0CAGLO,CAHK,iBAGWA,CAAC,KAAK,YAAN,IAAsBN,SAHjC,gCAIT,eAJS,EAIQC,UAJR;AAFb,KADF,CADF;AAaD,CA/BD;;AAiCAJ,KAAK,CAACU,KAAN,GAAcC,sBAAd;AAEAX,KAAK,CAACY,IAAN,GAAaC,qBAAb;AA6BAb,KAAK,CAACc,YAAN,GAAqB,EAArB;eAEed,K","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport FieldLabel from './field-label';\nimport FieldBody from './field-body';\n\nimport Element from '../../../element';\nimport { normalizeAlign } from '../../../../services/normalizer';\nimport useFieldContext, { FieldContext } from './context';\n\nconst Field = ({\n  className,\n  align,\n  multiline,\n  horizontal,\n  kind,\n  size,\n  ...props\n}) => {\n  const context = useFieldContext();\n  let k = null;\n\n  if (kind === 'addons') {\n    k = 'has-addons';\n  } else if (kind === 'group') {\n    k = 'is-grouped';\n  }\n\n  return (\n    <FieldContext.Provider value={{ size: size || context.size }}>\n      <Element\n        {...props}\n        className={classnames('field', className, {\n          [`${k}`]: k,\n          [`${k}-${normalizeAlign(align)}`]: k === 'is-grouped' && align,\n          [`${k}-multiline`]: k === 'is-grouped' && multiline,\n          'is-horizontal': horizontal,\n        })}\n      />\n    </FieldContext.Provider>\n  );\n};\n\nField.Label = FieldLabel;\n\nField.Body = FieldBody;\n\nField.propTypes = {\n  /**\n   * When this prop is set this value will be used as size for `Form.Label` `Form.Input`, `Form.Textarea`, `Form.Select`, `Button` and `Icon` inside the field\n   */\n  size: PropTypes.oneOfType([\n    PropTypes.oneOf(['small', 'medium', 'large']),\n    PropTypes.string,\n  ]),\n  /**\n   * `addon`: Will group together the controls without gap between\n   * `group`: Will group together the controls with evenly seperation between\n   */\n  kind: PropTypes.oneOf(['addons', 'group']),\n  /**\n   * Working together with `kind=\"group\"` to align all controls\n   */\n  align: PropTypes.oneOf(['center', 'right']),\n  /**\n   * When `kind=\"group\"` will wrap to next line if the control do not fit on the current line\n   */\n  multiline: PropTypes.bool,\n  /**\n   * To create a 2 columns form, See `Form.Field.Label` and `Form.Field.Body` for more details\n   */\n  horizontal: PropTypes.bool,\n};\n\nField.defaultProps = {};\n\nexport default Field;\n"],"file":"field.js"}