{"version":3,"sources":["../../../../src/components/form/components/input-file.js"],"names":["InputFile","className","style","onChange","color","size","fullwidth","align","boxed","name","label","icon","inputProps","filename","value","props","ref","context","calculatedSize","current","files","defaultProps"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;;;;;;;;;AAEA,IAAMA,SAAS,GAAG,SAAZA,SAAY,OAgBZ;AAAA;;AAAA,MAfJC,SAeI,QAfJA,SAeI;AAAA,MAdJC,KAcI,QAdJA,KAcI;AAAA,MAbJC,QAaI,QAbJA,QAaI;AAAA,MAZJC,KAYI,QAZJA,KAYI;AAAA,MAXJC,IAWI,QAXJA,IAWI;AAAA,MAVJC,SAUI,QAVJA,SAUI;AAAA,MATJC,KASI,QATJA,KASI;AAAA,MARJC,KAQI,QARJA,KAQI;AAAA,MAPJC,IAOI,QAPJA,IAOI;AAAA,MANJC,KAMI,QANJA,KAMI;AAAA,MALJC,IAKI,QALJA,IAKI;AAAA,MAJJC,UAII,QAJJA,UAII;AAAA,MAHJC,QAGI,QAHJA,QAGI;AAAA,MAFJC,KAEI,QAFJA,KAEI;AAAA,MADDC,KACC;;AACJ,MAAMC,GAAG,GAAG,oBAAZ;AACA,MAAMC,OAAO,GAAG,0BAAhB;AACA,MAAMC,cAAc,GAAGb,IAAI,IAAIY,OAAO,CAACZ,IAAvC;AAEA,wBAAU,YAAM;AACd,QAAI,CAACW,GAAG,CAACG,OAAT,EAAkB;AAChB;AACD;;AACD,QAAIL,KAAJ,EAAW;AACTE,MAAAA,GAAG,CAACG,OAAJ,CAAYC,KAAZ,GAAoBN,KAApB;AACD,KAFD,MAEO;AACLE,MAAAA,GAAG,CAACG,OAAJ,CAAYL,KAAZ,GAAoB,EAApB;AACD;AACF,GATD,EASG,CAACA,KAAD,CATH;AAWA,sBACE,gCAAC,mBAAD;AACE,IAAA,KAAK,EAAEZ;AADT,KAEMa,KAFN;AAGE,IAAA,SAAS,EAAE,6BAAW,MAAX,EAAmBd,SAAnB,+DACFiB,cADE,GACiBA,cADjB,6CAEFd,KAFE,GAEQA,KAFR,6CAGF,gCAAeG,KAAf,CAHE,GAGwBA,KAHxB,gCAIT,UAJS,EAIG,CAAC,CAACM,QAJL,gCAKT,UALS,EAKGL,KALH,gCAMT,cANS,EAMOF,SANP;AAHb,mBAYE;AAAO,IAAA,SAAS,EAAC;AAAjB,kBACE,sDACMM,UADN;AAEE,IAAA,IAAI,EAAEH,IAFR;AAGE,IAAA,IAAI,EAAC,MAHP;AAIE,IAAA,SAAS,EAAC,YAJZ;AAKE,IAAA,QAAQ,EAAEN,QALZ;AAME,IAAA,GAAG,EAAEa;AANP,KADF,eASE;AAAM,IAAA,SAAS,EAAC;AAAhB,KACGL,IAAI,iBAAI;AAAM,IAAA,SAAS,EAAC;AAAhB,KAA6BA,IAA7B,CADX,eAEE;AAAM,IAAA,SAAS,EAAC;AAAhB,KAA8BD,KAA9B,CAFF,CATF,EAaGG,QAAQ,iBAAI;AAAM,IAAA,SAAS,EAAC;AAAhB,KAA6BA,QAA7B,CAbf,CAZF,CADF;AA8BD,CA9DD;;AAgIAb,SAAS,CAACqB,YAAV,GAAyB;AACvBX,EAAAA,KAAK,EAAE,kBADgB;AAEvBE,EAAAA,UAAU,EAAE;AAFW,CAAzB;eAKeZ,S","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport Element from '../../element';\n\nimport useFieldContext from './field/context';\nimport { normalizeAlign } from '../../../services/normalizer';\n\nconst InputFile = ({\n  className,\n  style,\n  onChange,\n  color,\n  size,\n  fullwidth,\n  align,\n  boxed,\n  name,\n  label,\n  icon,\n  inputProps,\n  filename,\n  value,\n  ...props\n}) => {\n  const ref = useRef();\n  const context = useFieldContext();\n  const calculatedSize = size || context.size;\n\n  useEffect(() => {\n    if (!ref.current) {\n      return;\n    }\n    if (value) {\n      ref.current.files = value;\n    } else {\n      ref.current.value = '';\n    }\n  }, [value]);\n\n  return (\n    <Element\n      style={style}\n      {...props}\n      className={classnames('file', className, {\n        [`is-${calculatedSize}`]: calculatedSize,\n        [`is-${color}`]: color,\n        [`is-${normalizeAlign(align)}`]: align,\n        'has-name': !!filename,\n        'is-boxed': boxed,\n        'is-fullwidth': fullwidth,\n      })}\n    >\n      <label className=\"file-label\">\n        <input\n          {...inputProps}\n          name={name}\n          type=\"file\"\n          className=\"file-input\"\n          onChange={onChange}\n          ref={ref}\n        />\n        <span className=\"file-cta\">\n          {icon && <span className=\"file-icon\">{icon}</span>}\n          <span className=\"file-label\">{label}</span>\n        </span>\n        {filename && <span className=\"file-name\">{filename}</span>}\n      </label>\n    </Element>\n  );\n};\n\nInputFile.propTypes = {\n  /**\n   * The color of `InputFile`\n   */\n  color: PropTypes.oneOfType([\n    PropTypes.oneOf([\n      'primary',\n      'link',\n      'info',\n      'success',\n      'warning',\n      'danger',\n      'dark',\n      'text',\n    ]),\n    PropTypes.string,\n  ]),\n  /**\n   * The size of `InputFile`\n   */\n  size: PropTypes.oneOfType([\n    PropTypes.oneOf(['small', 'medium', 'large']),\n    PropTypes.string,\n  ]),\n  /**\n   * The name of the selected file. It will be shown as the file label\n   * of this component, next/under the upload button.\n   */\n  filename: PropTypes.string,\n  /**\n   * The selected file(s) object.\n   */\n  value: PropTypes.any,\n  /**\n   * Whether `InputFile` should take up all available width.\n   */\n  fullwidth: PropTypes.bool,\n  align: PropTypes.oneOf(['center', 'right']),\n  /**\n   * Whether `InputFile` should be rendered in a box shape.\n   */\n  boxed: PropTypes.bool,\n  /**\n   * The name of the input field Commonly used for [multi-input handling](https://reactjs.org/docs/forms.html#handling-multiple-inputs)\n   */\n  name: PropTypes.string,\n  /**\n   * Label for the upload button.\n   */\n  label: PropTypes.string,\n  /**\n   * An optional icon to be drawn in the button next to/on top of the button label.\n   *\n   * `icon={<i className=\"fas ...\" />}`\n   */\n  icon: PropTypes.element,\n  /**\n   * Additional props to be passed to the underlying `<input>` element.\n   * Other props passed to `InputFile` itself will be passed to the element\n   * that wraps around the `<input>` element.\n   */\n  inputProps: PropTypes.shape({}),\n};\n\nInputFile.defaultProps = {\n  label: 'Choose a file...',\n  inputProps: {},\n};\n\nexport default InputFile;\n"],"file":"input-file.js"}