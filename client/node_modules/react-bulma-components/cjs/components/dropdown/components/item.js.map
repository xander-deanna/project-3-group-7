{"version":3,"sources":["../../../../src/components/dropdown/components/item.js"],"names":["DropdownItem","active","children","value","className","props","defaultProps"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;;;;;AAEA,IAAMA,YAAY,GAAG,SAAfA,YAAe,OAAsD;AAAA,MAAnDC,MAAmD,QAAnDA,MAAmD;AAAA,MAA3CC,QAA2C,QAA3CA,QAA2C;AAAA,MAAjCC,KAAiC,QAAjCA,KAAiC;AAAA,MAA1BC,SAA0B,QAA1BA,SAA0B;AAAA,MAAZC,KAAY;;AACzE,sBACE,gCAAC,mBAAD;AACE,IAAA,KAAK,EAAEF;AADT,KAEME,KAFN;AAGE,IAAA,IAAI,EAAC,cAHP;AAIE,IAAA,SAAS,EAAE,4BAAWD,SAAX,EAAsB,eAAtB,EAAuC;AAChD,mBAAaH;AADmC,KAAvC;AAJb,MAQGC,QARH,CADF;AAYD,CAbD;;AA+BAF,YAAY,CAACM,YAAb,GAA4B,EAA5B;eAEeN,Y","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport Element from '../../element';\n\nconst DropdownItem = ({ active, children, value, className, ...props }) => {\n  return (\n    <Element\n      title={value}\n      {...props}\n      role=\"presentation\"\n      className={classnames(className, 'dropdown-item', {\n        'is-active': active,\n      })}\n    >\n      {children}\n    </Element>\n  );\n};\n\nDropdownItem.propTypes = {\n  /**\n   * Whether this dropdown item is currently selected.\n   * Shows a highlighted effect if true.\n   * Note that the effect only works when this item is rendered as an anchor\n   * (`<a>`).\n   */\n  active: PropTypes.bool,\n  /**\n   * The value this dropdown item holds. When this item is clicked,\n   * this value is passed to the onChange callback of `<Dropdown />`.\n   * The value is used to determine if this item is active or not.\n   */\n  value: PropTypes.any.isRequired,\n};\n\nDropdownItem.defaultProps = {};\n\nexport default DropdownItem;\n"],"file":"item.js"}